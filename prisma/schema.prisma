// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  transactions  Transaction[]
  subscriptions Subscription[]
  documents     Document[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  country     String?
  propertyType PropertyType
  purchasePrice Decimal @db.Decimal(10, 2)
  purchaseDate DateTime
  units       Int?
  monthlyRent Decimal? @db.Decimal(10, 2)
  mortgageRate Float?
  mortgagePayment Decimal? @db.Decimal(10, 2)
  propertyTax  Decimal? @db.Decimal(10, 2)
  insurance    Decimal? @db.Decimal(10, 2)
  hoaFees      Decimal? @db.Decimal(10, 2)
  estimatedValue Decimal? @db.Decimal(10, 2)
  yearBuilt    Int?
  squareFootage Int?
  bedrooms     Int?
  bathrooms    Int?
  parkingSpaces Int?
  description  String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  documents    Document[]

  @@map("properties")
}

model Transaction {
  id          String   @id @default(cuid())
  type        TransactionType
  amount      Decimal  @db.Decimal(10, 2)
  description String
  category    String
  date        DateTime
  propertyId  String?
  userId      String
  receiptUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id])

  @@map("transactions")
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String   @unique
  stripeCustomerId   String?  @unique
  stripeSubscriptionId String? @unique
  status             SubscriptionStatus
  plan               SubscriptionPlan
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Document {
  id         String   @id @default(cuid())
  name       String
  type       DocumentType
  url        String
  size       Int
  propertyId String?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id])

  @@map("documents")
}

enum PropertyType {
  SINGLE_FAMILY
  MULTI_FAMILY
  CONDO
  TOWNHOUSE
  COMMERCIAL
  LAND
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum DocumentType {
  RECEIPT
  INVOICE
  CONTRACT
  INSURANCE
  TAX_DOCUMENT
  OTHER
}